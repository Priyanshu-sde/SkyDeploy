// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?  
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Site {
  id          String       @id @default(cuid())
  name        String
  url         String       @unique
  repoUrl     String
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  deployments Deployment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Deployment {
  id        String   @id @default(cuid())
  siteId    String
  site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  status    String   // e.g. 'live', 'building', 'error'
  logs      String?
  meta      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
